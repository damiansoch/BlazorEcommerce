@inject IProductManager ProductManager
@using BlazorEcommerce.Client.Shared.HelpersFunctions
@implements IDisposable

@if (ProductManager.Products is null || ProductManager.Products.Count == 0)
{
    <div class="row">
        <div class="spinner-grow mx-auto" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in ProductManager.Products)
        {
            <li class="media my3">
                <div class="media-image-wraper mr-3">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>

                </div>
            </li>
        }
    </ul>
}



@code {


    protected override void OnInitialized()
    {
        ProductManager.ProductChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductManager.ProductChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price.PriceToFixedString()}";
        }
        else
        {
            decimal minPrice = variants.Min(x => x.Price);
            return $"Starting at ${minPrice.PriceToFixedString()}";
        }

    }


}
